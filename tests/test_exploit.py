import pytest
from pivot.dataclass_utils import Target, TargetInput
from pivot.utils import *
from pivot.exploit_utils import *
from typing import List
from dataclasses import dataclass, field


import logging
import os
import subprocess
import tempfile

for handler in logging.root.handlers[:]:
    logging.root.removeHandler(handler)

logging.basicConfig(
    filename="test.log",
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s",
    filemode="w",  # optional: start fresh every run
)
# targets = {
#     "iwconfig": Target(
#         name="iwconfig",
#         path="/mnt/binaries/iwconfig",
#         timeout=3,
#         target_input=TargetInput(type="argv", content=iwconfig_input),
#         env=dict(os.environ),
#         argv=["@@"]
#     ),
#     "vuln": Target(
#         name="vuln",
#         path="/mnt/binaries/vuln",
#         timeout=3,
#         target_input=TargetInput(type="stdin", content=vuln_input),
#         env=dict(os.environ),
#         argv=[]
#     ),
#     "june": Target(
#         name="june",
#         path="/mnt/binaries/june",
#         timeout=3,
#         target_input=TargetInput(type="argv", content=june_input),
#         env=dict(os.environ),
#         argv=["@@"]
#     ),
# }

@dataclass
class test_target:
    name: str
    timeout: int
    target_input_path: str
    arg_config: List[str] = field(default_factory=list)

targets = {
    "iwconfig": test_target(
        name="iwconfig",
        timeout=5,
        target_input_path="crash_inputs/iwconfig_input",
        arg_config=["iwconfig", "@@"]
    ),
    "vuln": test_target(
        name="vuln",
        timeout=1000,
        target_input_path="crash_inputs/vuln_input",
        arg_config=["vuln"]
    ),
    "ncompress": test_target(
        name="ncompress",
        timeout=1000,
        target_input_path="crash_inputs/ncompress_input",
        arg_config=["ncompress", "@@"]
    ),
    # "june": test_target(
    #     name="june",
    #     timeout=1000,
    #     target_input_path="crash_inputs/june_input",
    #     arg_config=["june", "@@"]
    # )
}


ENTRYPOINT = "pivot"


@pytest.mark.parametrize("target_key", targets.keys())
def test_target(target_key: str):

    target = targets.get(target_key)
    assert target is not None, f"Target {target_key} not found in targets dictionary"

    logging.info(f"Testing target: {target.name}")
    invocation = [
        ENTRYPOINT, "-i", target.target_input_path
    ]
    invocation.extend(target.arg_config)


    logging.info(f"Invocation: {' '.join(invocation)}")
    try:

        with tempfile.TemporaryDirectory() as temp_dir:
            logging.info(f"Using temporary directory: {temp_dir}")
            os.environ["TMPDIR"] = temp_dir

            exploit_command = " ".join(invocation)
            logging.info(f"System command: {exploit_command}")
            output = subprocess.check_output(
                exploit_command,
                timeout=target.timeout,
                shell=True,
            )

            logging.info(f"Output: {output.decode()}")

            exploit_script_path = f"/app/{target.name}_exploit/exploit.py"
            test_command = f"/bin/echo 'touch {temp_dir}/output' | {exploit_script_path}"

            logging.info(f"Exploit command: {test_command}")
            proc = subprocess.Popen(
                test_command,
                shell=True,
                executable='/bin/bash',
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                stdin=subprocess.DEVNULL  # Explicitly no stdin
            )
            try:
                stdout, stderr = proc.communicate(timeout=target.timeout)
                logging.info(f"Exploit stdout: {stdout.decode()}")
                logging.info(f"Exploit stderr: {stderr.decode()}")
            except subprocess.TimeoutExpired:
                proc.kill()
                logging.error("Exploit command timed out")
                raise

            assert os.path.exists(f"{temp_dir}/output")
            logging.info("Test passed: file created")

    except Exception as e:
        logging.error(f"Failed to start process: {e}")
        raise